from test.test_base import TestBase


class TestMain(TestBase):
    def test_readme_builtin(self):
        _test = self._assert_execute
        _test('ㄱㄴ ㄷㄹ ㅁ ㄱ ㅎㄹ', "832")
        _test('ㄱㄴ ㄷㄹ ㅁ ㄷ ㅎㄹ', "-30")
        _test('ㄷ ㄹ ㅅ ㅎㄷ', "8")
        _test('ㄱ ㄱㄱ ㄴ ㅎㄷ', "True")
        _test('ㄴㄱ ㄴ ㅈ ㅎㄷ', "True")
        _test('ㄱ ㄴ ㄴ ㅎㄷ ㅁ ㅎㄴ', "True")
        _test('ㅈㅈ ㅎㄱ', "True")
        _test('ㄱㅈ ㅎㄱ', "False")
        _test('ㄱ ㄴ ㄷ ㄹ ㅈ ㅎㄷ ㅎㄷ', "0")
        _test('ㄱ ㄴ ㄷ ㄹ ㄴ ㅎㄷ ㅎㄷ', "1")
        _test('ㅁㅈ ㅎㄱ', "''")
        _test('ㅁ ㄴㄱ ㅅ ㅎㄷ ㅁㅈ ㅎㄴ', "'0.25'")
        _test('ㄷㄴㄱ ㅁㅈ ㅎㄴ ㅅㅅ ㅎㄴ', "10")
        _test('ㄷㄴㄱ ㅁㅈ ㅎㄴ ㄷ ㅅㅅ ㅎㄷ', "2")
        _test('ㅁ ㄷㄱ ㅅ ㅎㄷ ㅁㅈ ㅎㄴ ㅂㄹ ㅎㄴ', "['0', '.', '0', '6', '2', '5']")
        _test('ㅁ ㄷㄱ ㅅ ㅎㄷ ㅁㅈ ㅎㄴ ㄱ ㅁㅈ ㅎㄴ ㅂㄹ ㅎㄷ', "['', '.', '625']")
        _test('ㅁ ㄴㄱ ㅅ ㅎㄷ ㅁㅈ ㅎㄴ ㅂㄹ ㅎㄴ ㄱㅁ ㅎㄴ', "'0.25'")
        _test('ㅁ ㄴㄱ ㅅ ㅎㄷ ㅁㅈ ㅎㄴ ㅂㄹ ㅎㄴ ㄴ ㅁㅈ ㅎㄴ ㄱㅁ ㅎㄷ', "'01.1215'")
        _test('ㄱ ㄷㄴㄱ ㅁㅈ ㅎㄴ ㅎㄴ', "'1'")
        _test('ㄱ ㄱㅈ ㅎㄱ ㄱ ㅁㅈ ㅎㄴ ㄱ ㅁㄹ ㅎㄴ ㅁㄹ ㅎㅁ', "[0, False, '0', [0]]")
        _test('ㄱ ㄴ ㄷ ㅁㄹ ㅎㄹ ㅈㄷ ㅎㄴ', "3")
        _test('ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅁㄹ ㅎㅅ ㄴ ㄴㄱ ㄷ ㅂㅈ ㅎㅁ', "[1, 3]")
        _test('ㄱ ㄴ ㄷ ㄹ ㅁㄹ ㅎㅁ ㅁㅈ ㅁㄷ ㅎㄷ', "['0', '1', '2', '3']")
        _test('ㄱ ㄴ ㄷ ㄹ ㅁㄹ ㅎㅁ ㄱ ㅇㄱ ㅁㅈ ㅎㄴ ㅎ ㅁㄷ ㅎㄷ', "['0', '1', '2', '3']")
        _test('ㄱ ㄴ ㄴㄱ ㄷ ㄷㄱ ㅁㄹ ㅎㅂ ㄱ ㅇㄱ ㄱ ㅈ ㅎㄷ ㅎ ㅅㅂ ㅎㄷ', "[-1, -2]")
        _test('ㅁ ㄷ ㄴㄱ ㅁㄹ ㅎㄹ ㅅ ㅅㄹ ㅎㄷ', '2')
        _test('ㄹ ㄷ ㄴㄱ ㅁㄹ ㅎㄹ ㅁ ㅅ ㅅㄹ ㅎㄹ', '9')
        _test('ㅅ ㄷ ㄹ ㄷ ㄴㄱ ㅁㄹ ㅎㄹ ㅅㄹ ㅎㄹ', '0.015625')
        _test('ㄹㄱ ㄱ ㄴ ㄷ ㄹ ㅁㄹ ㅎㅁ ㅎㄴ', "1")
        _test('ㄷㄴ ㅈ ㅈㄷㄱ ㅂ ㅎㄷ ㅎㄴ', '10')
        _test('ㄷㄴㄱ ㅈ ㅈㄷㄱ ㅂ ㅎㄷ ㅎㄴ', '10')
        _test('ㄱㅁㄱ ㅁㅈ ㅎㄴ ㄱ ㄴ ㅂ ㅂ ㅂ ㅎㄷ ㅎㄷ ㅎㄴ', r"b'\x33\x32'")
        _test('ㄱㅁㄱ ㅁㅈ ㅎㄴ ㄱ ㄷ ㅈㅈ ㅎㄱ ㅂ ㅂ ㅂ ㅎㄷ ㅎㄹ ㅎㄴ', r"b'\x00\x33\x00\x32'")
        _test('ㄱㅁㄱ ㅁㅈ ㅎㄴ ㄱ ㄷ ㄱㅈ ㅎㄱ ㅂ ㅂ ㅂ ㅎㄷ ㅎㄹ ㅎㄴ', r"b'\x33\x00\x32\x00'")
        _test('ㄱㅁㄱ ㄴ ㄹ ㅂ ㅂ ㅂ ㅎㄷ ㅎㄷ ㅎㄴ', r"b'\x20\x00\x00'")
        _test('ㄱㅁ ㄷ ㅁ ㅈㅈ ㅎㄱ ㅂ ㅂ ㅂ ㅎㄷ ㅎㄹ ㅎㄴ', r"b'\xFF\xFF\xFF\xE0'")
        _test('ㄴㄴㅈㄴㅂㄴㅂㅁㅁㅈㄷㅅㅂㄷㅂㅅㄱㅁㄱㄱㄱㄱㅈㄷㅂㄷㄹㄱㄱㅁㄹㅂㄱ ㄴ ㅁㄴㄱ ㅂ ㅂ ㅂ ㅎㄷ ㅎㄷ ㅎㄴ ㄱ ㄷ ㅂ ㅂ ㅂ ㅎㄷ ㅎㄷ ㅎㄴ', "'평범한 한글'")
        _test('ㅅㅂㅁㅈㄷㄱㄹㅈㄴㅁㄷㄱㄹㅂㄷㅈㄱㅅㅅㄱㄱㅂㄷㅈㄱㅈㄷㄱㄱㅈㄹㄴㅁㅂㄹㄱㄷㄴㄷㅁㄹㅂㄹㅅㄱㅈㅁㅁㄷㅂㄹㄱㄹㅂㅁㅁㅅㅂㄱㄷㅈㄱㅅㄹㅁㅅㄴ ㄴ ㄴㄹㄱ ㅂ ㅂ ㅂ ㅎㄷ ㅎㄷ ㅎㄴ ㄱ ㄴ ㅂ ㅂ ㅂ ㅎㄷ ㅎㄷ ㅎㄴ', "'./조각글/절댓값.txt'")
        _test('ㄷ ㄴㄱ ㅎㄱ ㅎㄴ', '2')
        _test('ㄷ ㅁㅈ ㅁㄹ ㄴㄱ ㅎㄷ ㅎㄴ', "['2']")
        _test('ㄷ ㄹ ㅁㄹ ㅎㄷ ㅁㅈ ㅁㄷ ㅎㄷ ㄷ ㅁㅂ ㅎㄴ ㅎㄴ', "'23'")
        _test('ㅈㄷ ㅂㅂ ㅎㄴ ㅎㄱ', '0')
        _test('ㄱ ㄴ ㄷ ㅈㄷ ㅂㅂ ㅎㄴ ㅎㄹ', '3')
        _test('ㄱ ㄴ ㄷ ㄹ ㅅㅈ ㅎㅁ', "{0: 1, 2: 3}")
        _test('ㄷ ㄱ ㄴ ㄷ ㄹ ㅅㅈ ㅎㅁ ㅎㄴ', '3')
        _test('ㄴ ㄱㅁㄱ ㅁㅈ ㅎㄴ ㄱ ㄴ ㅂ ㅂ ㅂ ㅎㄷ ㅎㄷ ㅎㄴ ㅎㄴ', r"b'\x32'")
        _test('ㄹ ㅎㄱ ㅅㅅ ㄱㅅ ㄴㄱㅎㄷ ㄱㄹ ㅎㄷ ㄱ ㅇㄱ ㄱ ㅇㄱ ㅅ ㅁㅈ ㅈㄹ ㄴㄱ ㅎㄹ ㄱㄹ ㅎㄹ ㅎ ㅎㄴ',
              'Nil', '3\n5', '243')
        _test('ㄹ ㅎㄱ ㅅㅅ ㄱㅅ ㄴㄱㅎㄷ ㄱㄹ ㅎㄷ ㄱ ㅇㄱ ㄱ ㅇㄱ ㅅ ㅁㅈ ㅈㄹ ㄴㄱ ㅎㄹ ㄱㄹ ㅎㄹ ㅎ ㅎㄴ',
              'Nil', '-0.25\n-2', '16')

    def test_readme_example(self):
        _test = self._assert_execute
        _test('나 과제 다 했다.', "-55")
        _test('그는 자는 척했다.', "False")
        _test('날마다 날마다 늘어간 기약과 더하던 후회다.', "322")
        _test('ㄱ [ㄴ, ㄷ, ㄹ] ㄱㅇㄱㅇㄴㅎㅎ ㅎㄹ ㅎㄴ', "1")
        _test('ㄴ [ㄴ, ㄷ, ㄹ] ㄱㅇㄱㅇㄴㅎㅎ ㅎㄹ ㅎㄴ', "2")
        _test('난 지금도 가끔 얘기 해. 누군간 여길 꿈꿨을까,끝없는 헛된 후회 하나 했던걸까...', "135")
        _test('난 지금도 늘 얘기 해. 누군간 여길 꿈꿨을까,끝없는 헛된 후회 하나 했던걸까...', "1")
        _test('ㄴ ㄴㄱ ㄹ ㅎ ㅎㄷ', "3")
        _test('ㄹ ㅁ ㄱ ㅇㄴ ㄱ ㅇㄱ ㄷ ㅎㄷ ㅎ ㅎ ㅎㄴ ㅎㄴ', "7")

    def test_readme_example_recursion(self):
        _test = self._assert_execute
        _test('ㄱ [ㄴ {ㄱㅇㄱ (ㄱㅇㄱ ㄴㄱ ㄷㅎㄷ ㄱㅇㅎㄴ) ㄱㅎㄷ}(ㄱㅇㄱ ㄷ ㅈㅎㄷ) ㅎㄷ] ㅎ ㅎㄴ', "1")
        _test('ㅂ [ㄴ {ㄱㅇㄱ (ㄱㅇㄱ ㄴㄱ ㄷㅎㄷ ㄱㅇㅎㄴ) ㄱㅎㄷ}(ㄱㅇㄱ ㄷ ㅈㅎㄷ) ㅎㄷ] ㅎ ㅎㄴ', "120")
        _test(
            'ㄱ [ㄴ {(ㄱㅇㄱ ㄴㄱ ㄷㅎㄷ ㄱㅇㅎㄴ) (ㄱㅇㄱ ㄷㄱ ㄷㅎㄷ ㄱㅇㅎㄴ)ㄷㅎㄷ} (ㄱㅇㄱ ㄷ ㅈㅎㄷ) ㅎㄷ] ㅎ ㅎㄴ', "1")
        _test(
            'ㅅ [ㄴ {(ㄱㅇㄱ ㄴㄱ ㄷㅎㄷ ㄱㅇㅎㄴ) (ㄱㅇㄱ ㄷㄱ ㄷㅎㄷ ㄱㅇㅎㄴ)ㄷㅎㄷ} (ㄱㅇㄱ ㄷ ㅈㅎㄷ) ㅎㄷ] ㅎ ㅎㄴ', "13")

    def test_readme_example_io(self):
        _test = self._assert_execute
        _test('ㄹㅎㄱ {ㄱㅇㄱ ㅅㅅㅎㄴ ㄷ ㅅㅎㄷ ㄱㅅㅎㄴ}ㅎ ㄱㄹㅎㄷ', "0", '0')
        _test('ㄹㅎㄱ {ㄱㅇㄱ ㅅㅅㅎㄴ ㄷ ㅅㅎㄷ ㄱㅅㅎㄴ}ㅎ ㄱㄹㅎㄷ', "1", '1')
        _test('ㄹㅎㄱ {ㄱㅇㄱ ㅅㅅㅎㄴ ㄷ ㅅㅎㄷ ㄱㅅㅎㄴ}ㅎ ㄱㄹㅎㄷ', "1", '-1')
        _test('ㄹㅎㄱ {ㄱㅇㄱ ㅅㅅㅎㄴ ㄷ ㅅㅎㄷ ㄱㅅㅎㄴ}ㅎ ㄱㄹㅎㄷ', "4", '2')
        _test('ㄹㅎㄱ {ㄱㅇㄱ ㅅㅅㅎㄴ ㄷ ㅅㅎㄷ ㄱㅅㅎㄴ}ㅎ ㄱㄹㅎㄷ', "10000000000", '1e5')
        _test(
            'ㄱ [(ㄹㅎㄱ ㄱㅇㄱ ㅅㅅㅎㄴ ㄳㅎㄶ ㄱㄹㅎㄷ){(ㄱㅇㄴ ㄱㅅㅎㄴ) (ㄱㅇㄴ ㄱㅇㄱ ㄷㅎㄷ ㄴㅇㅎㄴ)ㄱㅇㄱ ㄱ ㄴㅎㄷ ㅎㄷ ㅎ} ㄱㄹㅎㄷ ㅎ] ㅎㄴ', "0", '0')
        _test(
            'ㄱ [(ㄹㅎㄱ ㄱㅇㄱ ㅅㅅㅎㄴ ㄳㅎㄶ ㄱㄹㅎㄷ){(ㄱㅇㄴ ㄱㅅㅎㄴ) (ㄱㅇㄴ ㄱㅇㄱ ㄷㅎㄷ ㄴㅇㅎㄴ)ㄱㅇㄱ ㄱ ㄴㅎㄷ ㅎㄷ ㅎ} ㄱㄹㅎㄷ ㅎ] ㅎㄴ', "1", '1\n0')
        _test(
            'ㄱ [(ㄹㅎㄱ ㄱㅇㄱ ㅅㅅㅎㄴ ㄳㅎㄶ ㄱㄹㅎㄷ){(ㄱㅇㄴ ㄱㅅㅎㄴ) (ㄱㅇㄴ ㄱㅇㄱ ㄷㅎㄷ ㄴㅇㅎㄴ)ㄱㅇㄱ ㄱ ㄴㅎㄷ ㅎㄷ ㅎ} ㄱㄹㅎㄷ ㅎ] ㅎㄴ', "9999999999", '1e10\n-1\n0')
        _test('(ㄹ ㅎㄱ ㄱ ㅇㄱ ㅅㅅ ㅎㄴ ㄱㅅ ㅎㄴ ㅎ ㄱㄹ ㅎㄷ)ㄱ ㅇㄱ ㄱ ㅇㄱ (ㄱ ㅇㄱ ㄴ ㅇㄱ ㅅ ㅎㄷ ㅁㅈ ㅎㄴ ㅈㄹ ㅎㄴ ㅎ)ㄱㄹ ㅎㄹ ㅎ ㅎㄴ',
              "Nil", '0.25\n-2', '16')
        _test('(ㄹ ㅎㄱ ㄱ ㅇㄱ ㅅㅅ ㅎㄴ ㄱㅅ ㅎㄴ ㅎ ㄱㄹ ㅎㄷ)ㄱ ㅇㄱ ㄱ ㅇㄱ (ㄱ ㅇㄱ ㄴ ㅇㄱ ㅅ ㅎㄷ ㄳㅎㄶ)ㄱㄹ ㅎㄹ ㅎ ㅎㄴ',
              "256", '0.0625\n-2')
        _test(
            'ㅁㅈㅎㄱ [ㄹㅎㄱ {(ㄱㅇㄴ ㄱㅅㅎㄴ) (ㄱㅇㄴ ㄱㅇㄱ ㄷㅎㄷ ㄴㅇㅎㄴ)(ㄱㅇㄱ ㅈㄷㅎㄴ ㄱ ㄴㅎㄷ) ㅎㄷ ㅎ} ㄱㄹㅎㄷ ㅎ] ㅎㄴ', "''", '\n')
        _test(
            'ㅁㅈㅎㄱ [ㄹㅎㄱ {(ㄱㅇㄴ ㄱㅅㅎㄴ) (ㄱㅇㄴ ㄱㅇㄱ ㄷㅎㄷ ㄴㅇㅎㄴ)(ㄱㅇㄱ ㅈㄷㅎㄴ ㄱ ㄴㅎㄷ) ㅎㄷ ㅎ} ㄱㄹㅎㄷ ㅎ] ㅎㄴ', "'A'", 'A\n\n')
        _test(
            'ㅁㅈㅎㄱ [ㄹㅎㄱ {(ㄱㅇㄴ ㄱㅅㅎㄴ) (ㄱㅇㄴ ㄱㅇㄱ ㄷㅎㄷ ㄴㅇㅎㄴ)(ㄱㅇㄱ ㅈㄷㅎㄴ ㄱ ㄴㅎㄷ) ㅎㄷ ㅎ} ㄱㄹㅎㄷ ㅎ] ㅎㄴ', "'AB'", 'A\nB\n\n')
