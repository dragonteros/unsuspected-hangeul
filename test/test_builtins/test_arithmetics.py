from test.test_base import TestBase


class TestArithmetics(TestBase):
    def test_multiply(self):
        _test = self._assert_execute
        _test("ㄱ ㄴ ㄷ ㄹ ㄱㅎㅁ", "0")
        _test("ㄴㄱ ㄴ ㄷ ㄹ ㄱㅎㅁ", "-6")
        _test("(ㄷ ㄴㄱ ㅅㅎㄷ) ㄷ ㄱㅎㄷ", "1.0")
        _test("(ㄷ ㄴㄱ ㅅㅎㄷ) ㄷ ㅄㅎㄴ ㄱㅎㄷ", "1+0i")
        _test("(ㄷ ㄴㄱ ㅄㅎㄷ) (ㄷ ㄴ ㅄㅎㄷ) ㄱㅎㄷ", "5+0i")
        _test("(ㄱ ㄱ ㅈㅎㄷ) (ㄱ ㄴ ㄴㅎㄷ) ㄱㅎㄷ", "False")
        _test("(ㄱ ㄱ ㅈㅎㄷ) (ㄱ ㄴ ㅈㅎㄷ) ㄱㅎㄷ", "False")
        _test("(ㄱ ㄱ ㄴㅎㄷ) (ㄱ ㄴ ㅈㅎㄷ) (ㅈㅈㅎㄱ) ㄱㅎㄹ", "True")

    def test_multiply_short_circuit(self):
        _test = self._assert_execute
        _test("[] 목록ㅎㄱ (ㄱㅇㄱ 재다ㅎㄴ ㄷ ㄴㅎㄷ ㄱ ㄱㅇㄱㅎㄴ ㄱ ㄴㅎㄷ 곱ㅎㄷㅎ)ㅎㄴ", "False")
        _test("[ㄱ, ㄴ] 목록ㅎㄷ (ㄱㅇㄱ 재다ㅎㄴ ㄷ ㄴㅎㄷ ㄱ ㄱㅇㄱㅎㄴ ㄱ ㄴㅎㄷ 곱ㅎㄷㅎ)ㅎㄴ", "True")

    def test_add(self):
        _test = self._assert_execute
        _test("ㄱ ㄴ ㄷ ㄹ ㄷㅎㅁ", "6")
        _test("ㄴㄱ ㄴ ㄷ ㄹㄱ ㄷㅎㅁ", "-1")
        _test("(ㄷ ㄴㄱ ㅅㅎㄷ) ㄷ ㄷㅎㄷ", "2.5")
        _test("(ㄷ ㄴㄱ ㅅㅎㄷ) ㄷ ㅄㅎㄴ ㄷㅎㄷ", "2.5+0i")
        _test("(ㄷ ㄴㄱ ㅄㅎㄷ) (ㄷ ㄴ ㅄㅎㄷ) ㄷㅎㄷ", "4+0i")
        _test("(ㄱ ㄱ ㅈㅎㄷ) (ㄱ ㄴ ㄴㅎㄷ) ㄷㅎㄷ", "False")
        _test("(ㄱ ㄱ ㅈㅎㄷ) (ㄱ ㄴ ㅈㅎㄷ) ㄷㅎㄷ", "True")
        _test("(ㄱ ㄱ ㄴㅎㄷ) (ㄱ ㄴ ㅈㅎㄷ) (ㅈㅈㅎㄱ) ㄷㅎㄹ", "True")
        _test("ㅁㅀㄱ ㅁㅀㄱ ㄷㅎㄷ", "[]")
        _test("ㄱ ㅁㅀㄴ ㅁㅀㄱ ㄷㅎㄷ", "[0]")
        _test("ㄱ ㅁㅀㄴ ㄴ ㄷ ㅁㅀㄷ ㄷㅎㄷ", "[0, 1, 2]")
        _test("ㄱ ㅁㅀㄴ ㄷㅎㄴ", "[0]")
        _test("ㅀㄱ (ㅀㄱ ㄱㅇㄴ ㄱㅇㄱ ㄷㅎㄷ ㄳㅎㄶ ㄱㅀㄷㅎ) ㄱㅀㄷ", "''", "\n\n")
        _test("ㅀㄱ (ㅀㄱ ㄱㅇㄴ ㄱㅇㄱ ㄷㅎㄷ ㄳㅎㄶ ㄱㅀㄷㅎ) ㄱㅀㄷ", "'불꽃'", "불\n꽃\n")
        _test("ㅅㅈㅎㄱ ㅅㅈㅎㄱ ㄷㅎㄷ", "{}")
        _test("ㅅㅈㅎㄱ ㅅㅈㅎㄱ ㄴ ㄷ ㅅㅈㅎㄷ ㅅㅈㅎㄱ ㄷㅎㅁ", "{1: 2}")
        _test("ㄱ ㄴ ㅅㅈㅎㄷ ㄴ ㄷ ㅅㅈㅎㄷ ㄷㅎㄷ", "{0: 1, 1: 2}")
        _test("ㄱ ㄴ ㅅㅈㅎㄷ ㄷ ㄹ ㅅㅈㅎㄷ ㅁ ㅂ ㅅㅈㅎㄷ ㄷㅎㄹ", "{0: 1, 2: 3, 4: 5}")
        _test("ㄱ ㄴ ㅅㅈㅎㄷ ㄷ ㄹ ㅅㅈㅎㄷ ㄷ ㅁ ㅅㅈㅎㄷ ㄷㅎㄹ", "{0: 1, 2: 4}")
        _test("(ㅂ ㅂ ㅂㅎㄷ) (ㅁㅈㅎㄱ ㄱ ㄴ ㄱㅇㄱㅎㄷㅎㄴ) ㄷㅎㄴ ㅎㅎㄴ", "b''")
        _test("(ㄱ ㄴ ㅂ ㅂ ㅂㅎㄷㅎㄷ) (ㅁㅈㅎㄱ ㄱㅇㄱㅎㄴ) (ㅁㅈㅎㄱ ㄱㅇㄱㅎㄴ) ㄷㅎㄷ ㅎㅎㄴ", "b''")
        _test(
            "(ㅂ ㅂ ㅂㅎㄷ) (ㄳㄱ ㄴ ㄴ ㄱㅇㄱㅎㄷㅎㄴ) (ㅁㅈㅎㄱ ㄱ ㄴ ㄱㅇㄱㅎㄷㅎㄴ) ㄷㅎㄷ ㅎㅎㄴ", "b'\\x30'"
        )
        _test(
            "(ㅂ ㅂ ㅂㅎㄷ) (ㄳㄱ ㄴ ㄴ ㄱㅇㄱㅎㄷㅎㄴ) (ㄴ ㅁㅈㅎㄴ ㄱ ㄴ ㄱㅇㄱㅎㄷㅎㄴ) ㄷㅎㄷ ㅎㅎㄴ",
            "b'\\x30\\x31'",
        )

    def test_add_short_circuit(self):
        _test = self._assert_execute
        _test("[] 목록ㅎㄱ (ㄱㅇㄱ 재다ㅎㄴ ㄱ ㄴㅎㄷ ㄱ ㄱㅇㄱㅎㄴ ㄱ ㄴㅎㄷ 더ㅎㄷㅎ)ㅎㄴ", "True")
        _test("[ㄱ] 목록ㅎㄴ (ㄱㅇㄱ 재다ㅎㄴ ㄱ ㄴㅎㄷ ㄱ ㄱㅇㄱㅎㄴ ㄱ ㄴㅎㄷ 더ㅎㄷㅎ)ㅎㄴ", "True")
        _test("[ㄴ] 목록ㅎㄴ (ㄱㅇㄱ 재다ㅎㄴ ㄱ ㄴㅎㄷ ㄱ ㄱㅇㄱㅎㄴ ㄱ ㄴㅎㄷ 더ㅎㄷㅎ)ㅎㄴ", "False")

    def test_exponentiate(self):
        _test = self._assert_execute
        _test("ㄱ ㄴ ㅅㅎㄷ", "0")
        _test("ㄴㄱ ㄴ ㅅㅎㄷ", "-1")
        _test("ㄷ ㄴㄱ ㅅㅎㄷ", "0.5")
        _test("ㄴㄱ ㄴㄱ ㅅㅎㄷ", "-1.0")
        _test("ㄱ ㅄㅎㄴ ㄴ ㅅㅎㄷ", "0i")
        _test("ㄱ ㄴ ㅄㅎㄷ ㄷ ㅅㅎㄷ", "-1+0i")
        _test("ㄴ ㄴ ㅄㅎㄷ ㄷ ㅅㅎㄷ ㄱ ㄷ ㅄㅎㄷ ㅂ ㅅ ㄱ ㅂㅎㅀㄷ", "True")
        _test("(ㄴ ㄴ ㅄㅎㄷ ㄴㄱ ㅅㅎㄷ ㄷ ㄱㅎㄷ) ㄴ ㄴㄱ ㅄㅎㄷ ㅂ ㅅ ㄱ ㅂㅎㅀㄷ", "True")
        _test("ㄱ ㄴㄱ ㅅㅎㄷ ㄱㅇㄱㅎ ㅅㄷㅎㄷ", "<예외: [5, -9]>")
        _test("ㄱ ㅄㅎㄴ ㄴㄱ ㅅㅎㄷ ㄱㅇㄱㅎ ㅅㄷㅎㄷ", "<예외: [5, -9]>")

        _test("ㄷ ㄷㄴㄱ ㅂ ㅅㅎㄹ", "4")
        _test("ㄷ ㄷㄴㄱ ㅂㄱ ㅅㅎㄹ", "4")
        _test("ㄷ ㄷㄴㄱ ㄱ ㅅㅎㄹ ㄱㅇㄱㅎ ㅅㄷㅎㄷ", "<예외: [5, -54]>")
        _test("ㄷ ㄱ ㅂ ㅅㅎㄹ", "1")
        _test("ㄷ ㄴㄱ ㅂ ㅅㅎㄹ", "3")
        _test("ㄷ ㄷㄱ ㅂ ㅅㅎㄹ", "4")
        _test("ㄷ ㄴㄱ ㅁ ㅅㅎㄹ ㄱㅇㄱㅎ ㅅㄷㅎㄷ", "<예외: [5, -54]>")


    def test_floor_div(self):
        _test = self._assert_execute
        _test("ㄱ ㄴ ㄴㄶㄷ", "0")
        _test("ㄴ ㄴ ㄴㄶㄷ", "1")
        _test("ㄴㄱ ㄴ ㄴㄶㄷ", "-1")
        _test("ㄷ ㄴㄱ ㄴㄶㄷ", "-2")
        _test("ㄹ ㄷ ㄴㄶㄷ", "1")
        _test("ㄺ ㄷ ㄴㄶㄷ", "-1")
        _test("ㄹ ㄷㄱ ㄴㄶㄷ", "-1")
        _test("ㄺ ㄷㄱ ㄴㄶㄷ", "1")
        _test("ㄹ (ㄷ ㄴㄱ ㅅㅎㄷ) ㄴㄶㄷ", "6.0")
        _test("(ㄷ ㄴㄱ ㅅㅎㄷ) ㄹ ㄴㄶㄷ", "0.0")
        _test("ㄴ ㄱ ㄴㄴㅎㄷ ㄱㅇㄱㅎ ㅅㄷㅎㄷ", "<예외: [5, -9]>")

    def test_modulo(self):
        _test = self._assert_execute
        _test("ㄱ ㄴ ㄴㅁㅎㄷ", "0")
        _test("ㄴ ㄴ ㄴㅁㅎㄷ", "0")
        _test("ㄴㄱ ㄴ ㄴㅁㅎㄷ", "0")
        _test("ㄷ ㄴㄱ ㄴㅁㅎㄷ", "0")
        _test("ㄹ ㄷ ㄴㅁㅎㄷ", "1")
        _test("ㄺ ㄷ ㄴㅁㅎㄷ", "-1")
        _test("ㄹ ㄷㄱ ㄴㅁㅎㄷ", "1")
        _test("ㄺ ㄷㄱ ㄴㅁㅎㄷ", "-1")
        _test("ㄹ (ㄷ ㄴㄱ ㅅㅎㄷ) ㄴㅁㅎㄷ", "0.0")
        _test("(ㄷ ㄴㄱ ㅅㅎㄷ) ㄹ ㄴㅁㅎㄷ", "0.5")
        _test("ㄴ ㄱ ㄴㅁㅎㄷ ㄱㅇㄱㅎ ㅅㄷㅎㄷ", "<예외: [5, -9]>")
