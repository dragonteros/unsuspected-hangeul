from test.test_base import TestBase


class TestConstructor(TestBase):
    def test_dict_basic(self):
        _test = self._assert_execute
        _test("ㅅㅈ ㅎㄱ", "{}")
        _test("ㄱ ㄴ ㄷ ㄹ ㅅㅈ ㅎㅁ", "{0: 1, 2: 3}")
        _test("ㄱ {ㄱ ㄴ ㄷ ㄹ ㅅㅈ ㅎㅁ} ㅎㄴ", "1")
        _test("ㄷ {ㄱ ㄴ ㄷ ㄹ ㅅㅈ ㅎㅁ} ㅎㄴ", "3")

    def test_dict_various_keys(self):
        _test = self._assert_execute
        _test("ㄱㅈㅎㄱ {ㄱㅈㅎㄱ ㅂ ㅅㅈㅎㄷ} ㅎㄴ", "5")
        _test("ㅂ ㅁㅈㅎㄴ {ㅂ ㅁㅈㅎㄴ ㅂ ㅅㅈㅎㄷ} ㅎㄴ", "5")
        _test("ㄱ ㄴ ㅅㅈㅎㄷ {ㄱ ㄴ ㅅㅈㅎㄷ ㅂ ㅅㅈㅎㄷ} ㅎㄴ", "5")
        _test("ㄱ ㄴ ㅅㅈㅎㄷ (ㄱㅇㄱ {ㄱㅇㄱ ㅂ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴ", "5")
        _test("ㄱ ㄴ ㅁㄹㅎㄷ {ㄱ ㄴ ㅁㄹㅎㄷ ㅂ ㅅㅈㅎㄷ} ㅎㄴ", "5")
        _test("ㄱ ㄴ ㅁㄹㅎㄷ (ㄱㅇㄱ {ㄱㅇㄱ ㅂ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴ", "5")
        _test("(ㄱ ㄴ ㄴ (ㅂ ㅂ ㅂㅎㄷ)ㅎㄷㅎㄴ) (ㄱㅇㄱ {ㄱㅇㄱ ㅂ ㅅㅈㅎㄷ}ㅎㄴ ㅎ)ㅎㄴ", "5")
        _test("(ㄴ ㄴ (ㅂ ㅂ ㅂㅎㄷ)ㅎㄷ) (ㄱ ㄱㅇㄱㅎㄴ {ㄱ ㄱㅇㄱㅎㄴ ㅂ ㅅㅈㅎㄷ}ㅎㄴ ㅎ)ㅎㄴ", "5")
        _test("ㅀ (ㄱㅇㄱ {ㄱㅇㄱ ㅂ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴ", "5")
        _test("ㅁㅈ ㄴㄱㅎㄴ (ㄱㅇㄱ {ㄱㅇㄱ ㅂ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴ", "5")
        _test("ㅁㅈ ㅁㅂㅎㄴ (ㄱㅇㄱ {ㄱㅇㄱ ㅂ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴ", "5")
        _test("ㅁㅈ ㅂㅂㅎㄴ (ㄱㅇㄱ {ㄱㅇㄱ ㅂ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴ", "5")
        _test("ㄹㅎㄱ (ㄱㅇㄱ {ㄱㅇㄱ ㅂ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴ", "5")
        _test("ㅀㄱ {ㅀㄱ ㅂ ㅅㅈㅎㄷ} ㅎㄴ", "5")
        _test("ㅂㄱㅎㄱ {ㅂㄱㅎㄱ ㅂ ㅅㅈㅎㄷ} ㅎㄴ", "5")
        _test("ㄷㅂㅎㄱ {ㄷㅂㅎㄱ ㅂ ㅅㅈㅎㄷ} ㅎㄴ", "5")
        _test("ㄱ ㄷㅂㅎㄴ {ㄱ ㄷㅂㅎㄴ ㅂ ㅅㅈㅎㄷ} ㅎㄴ", "5")
        _test("ㄱ ㄷㅂㅎㄴ (ㄱㅇㄱ {ㄱㅇㄱ ㅂ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴ", "5")

    def test_dict_complicated_keys(self):
        _test = self._assert_execute
        _test("ㄱ ㄴ ㅅㅈㅎㄷ ㄷ ㅅㅈㅎㄷ", "{{0: 1}: 2}")
        _test("(ㄱ ㄴ ㅅㅈㅎㄷ ㄷ ㄹ ㅅㅈㅎㄷ ㄷㅎㄷ) (ㄱ ㄴ ㄷ ㄹ ㅅㅈㅎㅁ ㄷ ㅅㅈㅎㄷ) ㅎㄴ", "2")
        _test("ㄱ ㅅㅈㅎㄱ ㅁㄹㅎㄷ ㄷ ㅅㅈㅎㄷ", "{[0, {}]: 2}")
        _test("(ㄱ ㅁㅀㄴ ㅅㅈㅎㄱ ㅁㅀㄴ ㄷㅎㄷ) (ㄱ ㅅㅈㅎㄱ ㅁㄹㅎㄷ ㄷ ㅅㅈㅎㄷ)ㅎㄴ", "2")

    def test_dict_various_values(self):
        _test = self._assert_execute
        _test("ㄱㅈㅎㄱ {ㄱㅈㅎㄱ ㅂㄱㅎㄱ ㅅㅈㅎㄷ} ㅎㄴ", "Nil")
        _test("ㅂ ㅁㅈㅎㄴ {ㅂ ㅁㅈㅎㄴ ㄱ ㅁㅈㅎㄴ ㅅㅈㅎㄷ} ㅎㄴ", "'0'")
        _test("ㄱ ㄴ ㅅㅈㅎㄷ {ㄱ ㄴ ㅅㅈㅎㄷ ㅅㅈㅎㄱ ㅅㅈㅎㄷ} ㅎㄴ", "{}")
        _test("ㄱ ㄴ ㅅㅈㅎㄷ (ㄱㅇㄱ {ㄱㅇㄱ ㄷ ㄹ ㅅㅈㅎㄷ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴ", "{2: 3}")
        _test("ㄱ ㄴ ㅁㄹㅎㄷ {ㄱ ㄴ ㅁㄹㅎㄷ ㅁㅀㄱ ㅅㅈㅎㄷ} ㅎㄴ", "[]")
        _test("ㄱ ㄴ ㅁㄹㅎㄷ (ㄱㅇㄱ {ㄱㅇㄱ ㄷ ㅁㅀㄴ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴ", "[2]")
        _test("(ㄱ ㄴ ㄴ (ㅂ ㅂ ㅂㅎㄷ)ㅎㄷㅎㄴ) (ㄱㅇㄱ {ㄱㅇㄱ ㄱㅇㄱ ㅅㅈㅎㄷ}ㅎㄴ ㅎ)ㅎㄴ", "b'\\x00'")
        _test(
            "(ㄴ ㄴ (ㅂ ㅂ ㅂㅎㄷ)ㅎㄷ) (ㄱ ㄱㅇㄱㅎㄴ {ㄱ ㄱㅇㄱㅎㄴ ㄴ ㄱㅇㄱㅎㄴ ㅅㅈㅎㄷ}ㅎㄴ ㅎ)ㅎㄴ",
            "b'\\x01'",
        )
        _test("ㅀ (ㄱㅇㄱ {ㄱㅇㄱ ㅂㅎ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴㅎㄱ", "5")
        _test("ㅁㅈ ㄴㄱㅎㄴ (ㄱㅇㄱ {ㄱㅇㄱ ㄱㅇㄱ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴㅎㄱ", "''")
        _test("ㄷ ㅁㅈ ㅁㅂㅎㄴ (ㄱㅇㄱ {ㄱㅇㄱ ㄱㅇㄱ ㅂㅂㅎㄴ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴㅎㄴ", "'2'")
        _test("ㄷ ㅁㅈㅎㄴ ㄱㅁ ㅂㅂㅎㄴ (ㄱㅇㄱ {ㄱㅇㄱ ㄱㅇㄱ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴㅎㄴ", "'2'")
        _test("ㄹㅎㄱ (ㄱㅇㄱ {ㄱㅇㄱ ㅀㄱ ㅅㅈㅎㄷ} ㅎㄴ ㅎ) ㅎㄴ", "'5'", "5", "")
        _test("ㅀㄱ {ㅀㄱ ㅀㄱ ㅅㅈㅎㄷ} ㅎㄴ", "'5'", "5", "")
        _test("ㅂㄱㅎㄱ {ㅂㄱㅎㄱ ㄴ ㅁㅈㅎㄴ ㅈㅀㄴ ㅅㅈㅎㄷ} ㅎㄴ", "Nil", "", "1")
        _test("ㄱ {ㄱ ㄷㅂㅎㄱ ㅅㅈㅎㄷ} ㅎㄴ", "<예외: []>")

    def test_dict_complicated_values(self):
        _test = self._assert_execute
        _test("ㄱ ㄴ ㄷ ㅅㅈㅎㄷ ㅅㅈㅎㄷ", "{0: {1: 2}}")
        _test("ㄱ (ㄱ ㄴ ㄷ ㅅㅈㅎㄷ ㅅㅈㅎㄷ) ㅎㄴ", "{1: 2}")
        _test("ㄴ ㄱ (ㄱ ㄴ ㄷ ㅅㅈㅎㄷ ㅅㅈㅎㄷ) ㅎㄴㅎㄴ", "2")
        _test("ㄱ ㄷ ㅅㅈㅎㄱ ㅁㄹㅎㄷ ㅅㅈㅎㄷ", "{0: [2, {}]}")
        _test("ㄱ {ㄱ ㄷ ㅅㅈㅎㄱ ㅁㄹㅎㄷ ㅅㅈㅎㄷ}ㅎㄴ", "[2, {}]")

    def test_list_basic(self):
        _test = self._assert_execute
        _test("ㅁㄹ ㅎㄱ", "[]")
        _test("ㄱ ㄴ ㄷ ㄹ ㅁㄹ ㅎㅁ", "[0, 1, 2, 3]")
        _test("ㄱ ([ㄱ ㄴ ㄷ] ㅁㄹ ㅎㄹ) ㅎㄴ", "0")
        _test("ㄴ ([ㄱ ㄴ ㄷ] ㅁㄹ ㅎㄹ) ㅎㄴ", "1")

    def test_list_various(self):
        _test = self._assert_execute
        _test(
            "목록ㅎㄱ 빈값ㅎㄱ ㄱ ㄱㅅㅎㄴ ㄴㅎ ㅁㄹ ㅎㅁ",
            "[[], Nil, 0, <깊이 0에서 생성된 함수>]",
        )
        _test(
            "ㄱ 복소ㅎㄴ ㄱ 거짓ㅎㄱ 문자ㅎㄱ 사전ㅎㄱ 뜻밖ㅎㄱ 목록 ㅎㅅ",
            "[0i, 0, False, '', {}, <예외: []>]",
        )

    def test_string(self):
        _test = self._assert_execute
        _test("ㅁㅈㅎㄱ", "''")
        _test("ㄱ ㅁㅈㅎㄴ", "'0'")
        _test("ㄱㄴ ㅁㅈㅎㄴ", "'-8'")
        _test("ㄴㄱ ㅁㅈㅎㄴ", "'-1'")
        _test("(ㄷ ㄴㄱ ㅅㅎㄷ) ㅁㅈㅎㄴ", "'0.5'")
        _test("(ㄷ ㄴㄱ ㅅㅎㄷ) ㄷ ㄱㅎㄷ ㅁㅈㅎㄴ", "'1.0'")
        _test("ㄱ ㅁㅈㅎㄴ ㅁㅈㅎㄴ", "'0'")
        _test("ㄱ ㅄㅎㄴ ㅁㅈㅎㄴ", "'0i'")

    def test_int(self):
        _test = self._assert_execute
        _test("ㄱ ㅈㅅㅎㄴ", "0")
        _test("ㄱ ㅈㅅㅎㄴ ㅅㅅㅎㄴ ㅈㅅㅎㄴ", "0")
        _test("ㄷ ㄴㄱ ㅅㅎㄷ ㅈㅅㅎㄴ", "0")
        _test("ㄷㄱ ㄴㄱ ㅅㅎㄷ ㅈㅅㅎㄴ", "0")
        _test("ㅀㄱ ㄱㅇㄱ ㅈㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "0", "0")
        _test("ㅀㄱ ㄱㅇㄱ ㅈㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "0", "+0")
        _test("ㅀㄱ ㄱㅇㄱ ㅈㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "0", "-0")
        _test("ㅀㄱ ㄱㅇㄱ ㅈㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "123", "123")
        _test("ㅀㄱ ㄱㅇㄱ ㄷ ㅈㅅㅎㄷ ㄳㅎㄶ ㄱㅀㄷ", "0", "0")
        _test("ㅀㄱ ㄱㅇㄱ ㄷ ㅈㅅㅎㄷ ㄳㅎㄶ ㄱㅀㄷ", "1", "01")
        _test("ㅀㄱ ㄱㅇㄱ ㄷ ㅈㅅㅎㄷ ㄳㅎㄶ ㄱㅀㄷ", "-5", "-101")
        _test("ㅀㄱ ㄱㅇㄱ ㄷ ㅈㅅㅎㄷ ㄳㅎㄶ ㄱㅀㄷ", "0", "00")
        _test("ㅀㄱ ㄱㅇㄱ ㄱㄷㄱ ㅈㅅㅎㄷ ㄳㅎㄶ ㄱㅀㄷ", "12", "c")
        _test("ㅀㄱ ㄱㅇㄱ ㄱㄷㄱ ㅈㅅㅎㄷ ㄳㅎㄶ ㄱㅀㄷ", "28", "1c")

    def test_float(self):
        _test = self._assert_execute
        _test("ㄱ ㅅㅅㅎㄴ", "0.0")
        _test("ㄱ ㅅㅅㅎㄴ ㅈㅅㅎㄴ ㅅㅅㅎㄴ", "0.0")
        _test("ㄷ ㄴㄱ ㅅㅎㄷ ㅅㅅㅎㄴ", "0.5")
        _test("ㄷㄱ ㄴㄱ ㅅㅎㄷ ㅅㅅㅎㄴ", "-0.5")
        _test("ㅀㄱ ㄱㅇㄱ ㅅㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "0.0", "0.0")
        _test("ㅀㄱ ㄱㅇㄱ ㅅㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "1.0", "01.")
        _test("ㅀㄱ ㄱㅇㄱ ㅅㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "-1.0", "-1.")
        _test("ㅀㄱ ㄱㅇㄱ ㅅㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "0.01", ".01")
        _test("ㅀㄱ ㄱㅇㄱ ㅅㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "10.1", "10.1")
        _test("ㅀㄱ ㄱㅇㄱ ㅅㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "0.0001", "1e-4")
        _test("ㅀㄱ ㄱㅇㄱ ㄷ ㅅㅅㅎㄷ ㄳㅎㄶ ㄱㅀㄷ", "0.0", "0.0")
        _test("ㅀㄱ ㄱㅇㄱ ㄷ ㅅㅅㅎㄷ ㄳㅎㄶ ㄱㅀㄷ", "1.0", "01.")
        _test("ㅀㄱ ㄱㅇㄱ ㄷ ㅅㅅㅎㄷ ㄳㅎㄶ ㄱㅀㄷ", "-0.5", "-.1")
        _test("ㅀㄱ ㄱㅇㄱ ㄷ ㅅㅅㅎㄷ ㄳㅎㄶ ㄱㅀㄷ", "2.5", "10.1")
        _test("ㅀㄱ ㄱㅇㄱ ㄱㄷㄱ ㅅㅅㅎㄷ ㄳㅎㄶ ㄱㅀㄷ", "0.0", ".0")
        _test("ㅀㄱ ㄱㅇㄱ ㄱㄷㄱ ㅅㅅㅎㄷ ㄳㅎㄶ ㄱㅀㄷ", "0.625", ".a")
        _test("ㅀㄱ ㄱㅇㄱ ㄱㄷㄱ ㅅㅅㅎㄷ ㄳㅎㄶ ㄱㅀㄷ", "-12.0", "-c.")
        _test("ㅀㄱ ㄱㅇㄱ ㄱㄷㄱ ㅅㅅㅎㄷ ㄳㅎㄶ ㄱㅀㄷ", "0.875", "+.e")

    def test_complex(self):
        _test = self._assert_execute
        _test("ㄱ ㅄㅎㄴ", "0i")
        _test("ㄱ ㄱ ㅄㅎㄷ", "0i")
        _test("ㄴ ㅄㅎㄴ", "1+0i")
        _test("ㄴㄱ ㅄㅎㄴ", "-1+0i")
        _test("ㄷ ㄴㄱ ㅅㅎㄷ ㅄㅎㄴ", "0.5+0i")
        _test("ㄱ ㄴ ㅄㅎㄷ", "i")
        _test("ㄱ ㄴㄱ ㅄㅎㄷ", "-i")
        _test("ㄱ ㄷ ㄴㄱ ㅅㅎㄷ ㅄㅎㄷ", "0.5i")
        _test("ㄷ ㄴㄱ ㅅㅎㄷ ㄷㄱ ㅄㅎㄷ", "0.5-2i")
        _test("ㄱ (ㄹ ㄷㄱ ㅄㅎㄷ) ㅎㄴ", "3.0")
        _test("ㄴ (ㄹ ㄷㄱ ㅄㅎㄷ) ㅎㄴ", "-2.0")
        _test("(ㄴㄱ ㄷ ㄴㄱ ㅅㅎㄷ ㅅㅎㄷ) (ㄱㅇㄱ ㄱㅇㄱ ㅄㅎㄴ ㄶㄷㅎ)ㅎㄴ", "True")
        _test("(ㄴㄱ ㄷ ㄴㄱ ㅅㅎㄷ ㅅㅎㄷ) (ㄱㅇㄱ (ㄱ ㄴ ㅄㅎㄷ) ㄱㅎㄷ ㄱ ㄱㅇㄱ ㅄㅎㄷ ㄶㄷㅎ)ㅎㄴ", "True")
        _test("ㅀㄱ ㄱㅇㄱ ㅂㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "0i", "0")
        _test("ㅀㄱ ㄱㅇㄱ ㅂㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "0i", "0.0")
        _test("ㅀㄱ ㄱㅇㄱ ㅂㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "0i", "0i")
        _test("ㅀㄱ ㄱㅇㄱ ㅂㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "0i", "0i")
        _test("ㅀㄱ ㄱㅇㄱ ㅂㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "0i", "0+0i")
        _test("ㅀㄱ ㄱㅇㄱ ㅂㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "0i", "0.0+0.0i")
        _test("ㅀㄱ ㄱㅇㄱ ㅂㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "1+2i", "1+2i")
        _test("ㅀㄱ ㄱㅇㄱ ㅂㅅㅎㄴ ㄳㅎㄶ ㄱㅀㄷ", "3-2.5i", "3-2.5i")

    def test_dict_key_equality(self):
        _test = self._assert_execute
        _test("ㄱ ㅄㅎㄴ {ㄱ : ㄴ ㅅㅈㅎㄷ} ㅎㄴ", "1")
        _test("ㄱ {ㄱ : ㄴ, ㄱㅈㅎㄱ : ㄷ ㅅㅈㅎㅁ} ㅎㄴ", "1")

    def test_exception(self):
        _test = self._assert_execute
        _test("ㄷㅂㅎㄱ", "<예외: []>")
        _test("ㄱ ㄷㅂㅎㄴ", "<예외: [0]>")
        _test("ㄱ ㄴ ㄷㅂㅎㄷ", "<예외: [0, 1]>")
