from test.test_base import TestBase


class TestBitwise(TestBase):
    def test_bitwise_basic(self):
        _test = self._assert_execute
        _test('ㅂ ㅂㄷ ㄱ ㅂㅎㄹ, ㄱ ㅂ ㅂㄷ ㅂㅎㄷㅎㄴ, ㄶㄷ', "True")
        _test('ㅂ ㅂㄷ ㄷ ㅂㅎㄹ, ㄷ ㅂ ㅂㄷ ㅂㅎㄷㅎㄴ, ㄶㄷ', "True")
        _test('ㅂ ㅂㄷ ㅁ ㅂㅎㄹ, ㅁ ㅂ ㅂㄷ ㅂㅎㄷㅎㄴ, ㄶㄷ', "True")
        _test('ㅂ ㅂㄷ ㅂ ㅂㅎㄹ, ㅂ ㅂ ㅂㄷ ㅂㅎㄷㅎㄴ, ㄶㄷ', "True")
        _test('ㅂ ㅂㄷ ㅈ ㅂㅎㄹ, ㅈ ㅂ ㅂㄷ ㅂㅎㄷㅎㄴ, ㄶㄷ', "True")

    def test_bitwise_and(self):
        _test = self._assert_execute
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ (ㄱㅇㄱ ㄴㄱ ㅂ ㅂㄷ ㄱ ㅂㅎㅀㄷ ㄱㅇㄱ ㄶㄷㅎ) ㅁㄷㅎㄷ ㄱ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ (ㄱㅇㄱ ㄱ ㅂ ㅂㄷ ㄱ ㅂㅎㅀㄷ ㄱ ㄶㄷㅎ) ㅁㄷㅎㄷ ㄱ ㅁㅂㅎㄶㄴ', 'True')

    def test_bitwise_or(self):
        _test = self._assert_execute
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ (ㄱㅇㄱ ㄴㄱ ㅂ ㅂㄷ ㄷ ㅂㅎㅀㄷ ㄴㄱ ㄶㄷㅎ) ㅁㄷㅎㄷ ㄱ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ (ㄱㅇㄱ ㄱ ㅂ ㅂㄷ ㄷ ㅂㅎㅀㄷ ㄱㅇㄱ ㄶㄷㅎ) ㅁㄷㅎㄷ ㄱ ㅁㅂㅎㄶㄴ', 'True')

    def test_bitwise_not(self):
        _test = self._assert_execute
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ (ㄱㅇㄱ ㅂ ㅂㄷ ㅁ ㅂㅎㅀㄴ ㄱㅇㄱ ㄷㅎㄷ ㄴㄱ ㄶㄷㅎ) ㅁㄷㅎㄷ ㄱ ㅁㅂㅎㄶㄴ', 'True')

    def test_bitwise_xor(self):
        _test = self._assert_execute
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ (ㄱㅇㄱ ㄱㅇㄱ ㅂ ㅂㄷ ㅂ ㅂㅎㅀㄷ ㄱ ㄶㄷㅎ) ㅁㄷㅎㄷ ㄱ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ (ㄱㅇㄱ ㄱ ㅂ ㅂㄷ ㅂ ㅂㅎㅀㄷ ㄱㅇㄱ ㄶㄷㅎ) ㅁㄷㅎㄷ ㄱ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ (ㄱㅇㄱ ㄴㄱ ㅂ ㅂㄷ ㅂ ㅂㅎㅀㄷ (ㄱㅇㄱ ㅂ ㅂㄷ ㅁ ㅂㅎㅀㄴ) ㄶㄷㅎ) ㅁㄷㅎㄷ ㄱ ㅁㅂㅎㄶㄴ', 'True')

    def test_bitwise_shift(self):
        _test = self._assert_execute
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ [ㄱ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄱㅎㄷ, ㄱㅇㄴ ㄱㅇㄱ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ [ㄴ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄱㅎㄷ, ㄱㅇㄴ ㄱㅇㄱ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ [ㄷ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄱㅎㄷ, ㄱㅇㄴ ㄱㅇㄱ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ [ㄹ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄱㅎㄷ, ㄱㅇㄴ ㄱㅇㄱ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ [ㅁ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄱㅎㄷ, ㄱㅇㄴ ㄱㅇㄱ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ [ㅂ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄱㅎㄷ, ㄱㅇㄴ ㄱㅇㄱ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ [ㅅ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄱㅎㄷ, ㄱㅇㄴ ㄱㅇㄱ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㅈㄱ ㅅㄱ ㅂㄱ ㅁㄱ ㄺ ㄷㄱ ㄴㄱ ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㅈㄴㄱ [ㅈ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄱㅎㄷ, ㄱㅇㄴ ㄱㅇㄱ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㄱㄴㄱ [ㄱ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄴㄶㄷ, ㄱㅇㄴ ㄱㅇㄱ ㄴㄱ ㄱㅎㄷ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㄱㄴㄱ [ㄴ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄴㄶㄷ, ㄱㅇㄴ ㄱㅇㄱ ㄴㄱ ㄱㅎㄷ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㄱㄴㄱ [ㄷ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄴㄶㄷ, ㄱㅇㄴ ㄱㅇㄱ ㄴㄱ ㄱㅎㄷ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㄱㄴㄱ [ㄹ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄴㄶㄷ, ㄱㅇㄴ ㄱㅇㄱ ㄴㄱ ㄱㅎㄷ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㄱㄴㄱ [ㅁ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄴㄶㄷ, ㄱㅇㄴ ㄱㅇㄱ ㄴㄱ ㄱㅎㄷ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㄱㄴㄱ [ㅂ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄴㄶㄷ, ㄱㅇㄴ ㄱㅇㄱ ㄴㄱ ㄱㅎㄷ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
        _test('[ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅈ] ㅁㅀㄱㄴㄱ [ㅅ (ㄱㅇㄴ (ㄷ ㄱㅇㄱ ㅅㅎㄷ) ㄴㄶㄷ, ㄱㅇㄴ ㄱㅇㄱ ㄴㄱ ㄱㅎㄷ ㅂ ㅂㄷ ㅈ ㅂㅎㅀㄷ, ㄶㄷㅎㅎ)ㅎㄴ] ㅁㄷㅎㄷ ㄷ ㅁㅂㅎㄶㄴ', 'True')
