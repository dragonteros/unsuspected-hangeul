from test.test_base import TestBase


class TestByte(TestBase):
    def test_byte_basic(self):
        _test = self._assert_execute
        _test("ㅂ ㅂ ㅂㅎㄷ", "<Builtin Module ㅂ ㅂ>")

    def test_utf_8(self):
        _test = self._assert_execute
        _test("ㅁㅈㅎㄱ ㄱ ㄴ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b''")
        _test("ㅁㄴㄱ ㅁㅈㅎㄴ ㄱ ㄴ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\x31\\x32'")
        _test("(ㄱ ㄴ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ) ㅁㅈㅎㄱ ㄱㅇㄱㅎㄴ ㄱㅇㄱㅎㄶㅎㄴ", "''")
        _test("(ㄱ ㄴ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ) ㅁㄴㄱ ㅁㅈㅎㄴ ㄱㅇㄱㅎㄴ ㄱㅇㄱㅎㄶㅎㄴ", "'12'")
        _test("(ㅂ ㅂ ㅂㅎㄷ) [ㅁㅀㄱ] (ㄴ ㄴ ㄱㅇㄱㅎㄷ) (ㄱ ㄴ ㄱㅇㄱㅎㄷ) ㄴㄱㅎㄷ ㅁㄷㅎㄷ ㅎㅎㄴ", "[]")
        _test(
            "(ㅂ ㅂ ㅂㅎㄷ) ㄱㄴㅂㄷㅅㄱㄹㄹㅁㅂㅂㅈㅅㄱㄹㄴㄱㅁㅁㄹㅈㅅㄹㄹㄷㅅㄴㅅㅅㄱㄴㄹㄴㅁㄱ (ㄴ ㅂㄴㄱ ㄱㅇㄱㅎㄷ) (ㄱ ㄴ ㄱㅇㄱㅎㄷ) ㄴㄱㅎㄷㅎㄴ ㅎㅎㄴ",
            "'Hello, world!'",
        )
        _test(
            "(ㅂ ㅂ ㅂㅎㄷ) ㅂㅂㅈㅈㄱㄹㄷㅁㄹㅂㄹㄴㄹㄴㅂㅁㅂㅂㅈㄷㄴㄴㅈㅁㄱㅁㅁㅅㅅㄹㅂㅁㅁㄹㄷㅂㅅㄴㅅㅂㄱㄱㄷ (ㄴ ㄱㄷㄱ ㄱㅇㄱㅎㄷ) (ㄱ ㄴ ㄱㅇㄱㅎㄷ) ㄴㄱㅎㄷㅎㄴ ㅎㅎㄴ",
            "'평범한 한글'",
        )
        _test(
            "ㄹㅎㄱ ㄱ ㄴ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㄱㅅ ㄴㄱㅎㄷ ㄱㄹㅎㄷ",
            "b'\\xF0\\x9F\\x8F\\xB3\\xEF\\xB8\\x8F\\xE2\\x80\\x8D\\xE2\\x9A\\xA7\\xEF\\xB8\\x8F'",
            "\U0001F3F3\uFE0F\u200D\u26A7\uFE0F",
        )

    def test_utf_16(self):
        _test = self._assert_execute
        _test("ㅁㅈㅎㄱ ㄱ ㄷ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\xFF\\xFE'")
        _test(
            "ㅁㄴㄱ ㅁㅈㅎㄴ ㄱ ㄷ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\xFF\\xFE\\x31\\x00\\x32\\x00'"
        )
        _test("(ㄱ ㄷ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ) ㅁㅈㅎㄱ ㄱㅇㄱㅎㄴ ㄱㅇㄱㅎㄶㅎㄴ", "''")
        _test("(ㄱ ㄷ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ) ㅁㄴㄱ ㅁㅈㅎㄴ ㄱㅇㄱㅎㄴ ㄱㅇㄱㅎㄶㅎㄴ", "'12'")
        _test("ㅁㅈㅎㄱ ㄱ ㄷ ㄱㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b''")
        _test("ㅁㄴㄱ ㅁㅈㅎㄴ ㄱ ㄷ ㄱㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b'\\x31\\x00\\x32\\x00'")
        _test("(ㄱ ㄷ ㄱㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ) ㅁㅈㅎㄱ ㄱㅇㄱㅎㄴ ㄱㅇㄱㅎㄶㅎㄴ", "''")
        _test("(ㄱ ㄷ ㄱㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ) ㅁㄴㄱ ㅁㅈㅎㄴ ㄱㅇㄱㅎㄴ ㄱㅇㄱㅎㄶㅎㄴ", "'12'")
        _test("ㅁㅈㅎㄱ ㄱ ㄷ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b''")
        _test("ㅁㄴㄱ ㅁㅈㅎㄴ ㄱ ㄷ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b'\\x00\\x31\\x00\\x32'")
        _test("(ㄱ ㄷ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ) ㅁㅈㅎㄱ ㄱㅇㄱㅎㄴ ㄱㅇㄱㅎㄶㅎㄴ", "''")
        _test("(ㄱ ㄷ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ) ㅁㄴㄱ ㅁㅈㅎㄴ ㄱㅇㄱㅎㄴ ㄱㅇㄱㅎㄶㅎㄴ", "'12'")

    def test_utf_32(self):
        _test = self._assert_execute
        _test("ㅁㅈㅎㄱ ㄱ ㅁ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\xFF\\xFE\\x00\\x00'")
        _test(
            "ㄴ ㅁㅈㅎㄴ ㄱ ㅁ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ",
            "b'\\xFF\\xFE\\x00\\x00\\x31\\x00\\x00\\x00'",
        )
        _test("ㅁㅈㅎㄱ ㄱ ㅁ ㄱㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b''")
        _test(
            "ㅁㄴㄱ ㅁㅈㅎㄴ ㄱ ㅁ ㄱㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ",
            "b'\\x31\\x00\\x00\\x00\\x32\\x00\\x00\\x00'",
        )
        _test("ㅁㅈㅎㄱ ㄱ ㅁ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b''")
        _test(
            "ㅁㄴㄱ ㅁㅈㅎㄴ ㄱ ㅁ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ",
            "b'\\x00\\x00\\x00\\x31\\x00\\x00\\x00\\x32'",
        )
        _test(
            "ㄹㅎㄱ ㄱ ㅁ 진짜ㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㄱㅅ ㄴㄱㅎㄷ ㄱㄹㅎㄷ",
            "b'\\x00\\x01\\xF3\\xF3\\x00\\x00\\xFE\\x0F\\x00\\x00\\x20\\x0D\\x00\\x00\\x26\\xA7\\x00\\x00\\xFE\\x0F'",
            "\U0001F3F3\uFE0F\u200D\u26A7\uFE0F",
        )

    def test_unsigned_little(self):
        _test = self._assert_execute
        _test("ㄱ ㄴ ㄴ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\x00'")
        _test("ㄱㅁㄱ ㄴ ㄴ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\x20'")
        _test("ㄴㅁㄴ ㄴ ㄴ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\x61'")
        _test("ㄴㅁㄴ ㄴ ㄷ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\x61\\x00'")
        _test("ㅈㅈㄴ ㄴ ㄴ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\x7F'")
        _test("ㅂㅄ ㄴ ㄷ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\xAD\\x01'")

    def test_unsigned_big(self):
        _test = self._assert_execute
        _test("ㄱ ㄴ ㄴ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b'\\x00'")
        _test("ㄱㅁㄱ ㄴ ㄴ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b'\\x20'")
        _test("ㄴㅁㄴ ㄴ ㄴ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b'\\x61'")
        _test("ㄴㅁㄴ ㄴ ㄷ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b'\\x00\\x61'")
        _test("ㅈㅈㄴ ㄴ ㄴ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b'\\x7F'")
        _test("ㅂㅄ ㄴ ㄷ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b'\\x01\\xAD'")

    def test_signed_little(self):
        _test = self._assert_execute
        _test("ㄱㅁㄱ ㄷ ㄴ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\x20'")
        _test("ㄴㅁㄴ ㄷ ㄴ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\x61'")
        _test("ㅈㅈㄴ ㄷ ㄴ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\x7F'")
        _test("ㅈㅈㄴ ㄷ ㄷ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\x7F\\x00'")
        _test("ㄴㄱ ㄷ ㄴ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\xFF'")
        _test("ㄴㄱ ㄷ ㄷ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\xFF\\xFF'")
        _test("ㄱㄱㄴㄱ ㄷ ㄴ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\xC0'")
        _test("ㄱㄱㄴㄱ ㄷ ㄷ ㅂ ㅂ ㅂㅎㄷ ㅎㄷ ㅎㄴ", "b'\\xC0\\xFF'")

    def test_signed_big(self):
        _test = self._assert_execute
        _test("ㄱㅁㄱ ㄷ ㅁ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b'\\x00\\x00\\x00\\x20'")
        _test("ㄴㅁㄴ ㄷ ㄹ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b'\\x00\\x00\\x61'")
        _test("ㅈㅈㄴ ㄷ ㄷ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b'\\x00\\x7F'")
        _test("ㅂㅄ ㄷ ㄷ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b'\\x01\\xAD'")
        _test("ㄴㄱ ㄷ ㄹ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b'\\xFF\\xFF\\xFF'")
        _test("ㄱㄱㄴㄱ ㄷ ㄷ ㅈㅈㅎㄱ ㅂ ㅂ ㅂㅎㄷ ㅎㄹ ㅎㄴ", "b'\\xFF\\xC0'")

    def test_swap_endian(self):
        _test = self._assert_execute
        _test("(ㅂ ㅂ ㅂㅎㄷ) ㄱㅁㄱ (ㄴ ㄷ ㅈㅈㅎㄱ ㄱㅇㄱㅎㄹ)ㅎㄴ (ㄷ ㄷ ㄱㅇㄱㅎㄷ)ㅎㄴ ㅎㅎㄴ", "8192")
        _test("(ㅂ ㅂ ㅂㅎㄷ) ㅈㅈㄴ (ㄴ ㄷ ㅈㅈㅎㄱ ㄱㅇㄱㅎㄹ)ㅎㄴ (ㄷ ㄷ ㄱㅇㄱㅎㄷ)ㅎㄴ ㅎㅎㄴ", "32512")
        _test("(ㅂ ㅂ ㅂㅎㄷ) ㅅㅈㄹ (ㄴ ㄷ ㅈㅈㅎㄱ ㄱㅇㄱㅎㄹ)ㅎㄴ (ㄷ ㄷ ㄱㅇㄱㅎㄷ)ㅎㄴ ㅎㅎㄴ", "-512")
        _test(
            "(ㅂ ㅂ ㅂㅎㄷ) ㅀㄱ (ㄱ ㄷ ㅈㅈㅎㄱ ㄱㅇㄱㅎㄹ) (ㄱ ㄷ ㄱㅈㅎㄱ ㄱㅇㄱㅎㄹ) ㄳ ㄴㄱㅎㄹ ㄱㅀㄷㅎㅎㄴ",
            "''",
            "\n",
            "",
        )
        _test(
            "(ㅂ ㅂ ㅂㅎㄷ) ㅀㄱ (ㄱ ㄷ ㅈㅈㅎㄱ ㄱㅇㄱㅎㄹ) (ㄱ ㄷ ㄱㅈㅎㄱ ㄱㅇㄱㅎㄹ) ㄳ ㄴㄱㅎㄹ ㄱㅀㄷㅎㅎㄴ",
            "'쮭'",
            "귋",
            "",
        )
        _test(
            "(ㅂ ㅂ ㅂㅎㄷ) ㅀㄱ (ㄱ ㄷ ㅈㅈㅎㄱ ㄱㅇㄱㅎㄹ) (ㄱ ㄷ ㄱㅈㅎㄱ ㄱㅇㄱㅎㄹ) ㄳ ㄴㄱㅎㄹ ㄱㅀㄷㅎㅎㄴ",
            "'쮭붬'",
            "귋경",
            "",
        )
        _test(
            "(ㅂ ㅂ ㅂㅎㄷ) ㅀㄱ (ㄱ ㄷ ㄱㅈㅎㄱ ㄱㅇㄱㅎㄹ) (ㄱ ㄷ ㄱㅇㄱㅎㄷ) ㄳ ㄴㄱㅎㄹ ㄱㅀㄷㅎㅎㄴ",
            "'귋경'",
            "귋경",
            "",
        )
        _test(
            "(ㅂ ㅂ ㅂㅎㄷ) ㅀㄱ (ㄱ ㄷ ㅈㅈㅎㄱ ㄱㅇㄱㅎㄹ) (ㄱ ㄷ ㄱㅇㄱㅎㄷ) ㄳ ㄴㄱㅎㄹ ㄱㅀㄷㅎㅎㄴ",
            "'쮭붬'",
            "귋경",
            "",
        )
